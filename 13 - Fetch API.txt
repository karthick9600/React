

In React, can fetch data from an API using fetch() inside useEffect so it runs when your component loads.
Here’s the step-by-step:



1. Basic example

import React, { useState, useEffect } from "react";

function App() {
  const [data, setData] = useState([]); // Store fetched data
  const [loading, setLoading] = useState(true); // Loading state
  const [error, setError] = useState(null); // Error state

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/posts") // API URL
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json(); // Convert response to JSON
      })
      .then((data) => {
        setData(data); // Store data in state
        setLoading(false);
      })
      .catch((error) => {
        setError(error.message);
        setLoading(false);
      });
  }, []); // [] ? Runs only once when component mounts

  if (loading) return <h2>Loading...</h2>;
  if (error) return <h2>Error: {error}</h2>;

  return (
    <div>
      <h1>Fetched Data</h1>
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;



2. Important points
useEffect ? Runs the fetch when the component is mounted.

Error handling ? Always check response.ok.

State variables ?

data ? store API result

loading ? show spinner/text while fetching

error ? show if request fails

Empty dependency array ([]) ? ensures fetch runs only once.

